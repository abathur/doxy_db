"""
Establishes baseline for SQL statements emitted by our Statement class.

Does not actually execute any of these SQL statements.

This is probably also useful as pragmatic documentation for the Statement class; I think it's fine to add a limited number of examples that don't enhance coverage, but do provide explicit examples of common patterns that wouldn't otherwise be represented...
"""

import unittest

from .. import exceptions
from .. import sql


class TestStatementCore(unittest.TestCase):
    """Validate statements generated by the Statement class"""

    def test_blank(self):
        with self.assertRaises(exceptions.InvalidStatement):
            sql.Statement(None).prepare()

    def test_basic_table(self):
        ob = sql.Statement(None).table("table", "id").prepare()
        self.assertEqual(ob._full_query, "SELECT * FROM table")
        self.assertEqual(ob._ids_only, "SELECT table.id FROM table")

    def test_table_columns(self):
        ob = sql.Statement(None).table("table", "id", columns=["one", "two"]).prepare()
        self.assertEqual(ob._full_query, "SELECT table.one, table.two FROM table")
        self.assertEqual(ob._ids_only, "SELECT table.id FROM table")

    def test_sequence_variations(self):
        # Also implicitly tests .where, .limit, and .order_by
        one = sql.Statement(None)
        two = sql.Statement(None)
        three = sql.Statement(None)

        stmt = "SELECT * FROM table WHERE foo='bar' AND bar='foo' ORDER BY foo DESC LIMIT 3"

        self.assertEqual(
            one.table("table", "id")
            .where(foo="bar", bar="foo")
            .limit(3)
            .order_by("foo", reverse=True)
            .prepare()
            ._full_query,
            stmt,
        )

        two.table("table", "id")
        two.where(foo="bar")
        two.where(bar="foo")
        two.limit(3)
        two.order_by("foo", reverse=True)

        self.assertEqual(two.prepare()._full_query, stmt)

        # reverse everything except the where calls
        three.order_by("foo", reverse=True)
        three.limit(3)
        three.where(foo="bar")
        three.where(bar="foo")
        three.table("table", "id")

        self.assertEqual(three.prepare()._full_query, stmt)

    def test_statement_composition(self):
        one = sql.Statement(None).table("table", "id", columns=["one", "two"])

        two = sql.Statement(None, one).where(foo="bar")

        order_a = sql.Statement(None, two).order_by("bar")
        order_b = sql.Statement(None, two).order_by("bar", reverse=True)

        two.limit(1)

        three = sql.Statement(None, two).limit(3)

        two.where(bar="foo").limit(2)

        self.assertEqual(
            one.prepare()._full_query, "SELECT table.one, table.two FROM table"
        )
        self.assertEqual(
            two.prepare()._full_query,
            "SELECT table.one, table.two FROM table WHERE foo='bar' AND bar='foo' LIMIT 2",
        )
        self.assertEqual(
            order_a.prepare()._full_query,
            "SELECT table.one, table.two FROM table WHERE foo='bar' ORDER BY bar",
        )
        self.assertEqual(
            order_b.prepare()._full_query,
            "SELECT table.one, table.two FROM table WHERE foo='bar' ORDER BY bar DESC",
        )
        self.assertEqual(
            three.prepare()._full_query,
            "SELECT table.one, table.two FROM table WHERE foo='bar' LIMIT 3",
        )

    def test_frozen_statement(self):
        with self.assertRaises(exceptions.FrozenStatement):
            one = (
                sql.Statement(None)
                .table("table", "id", columns=["one", "two"])
                .prepare()
            )

            one.limit(1)

    def test_override_select(self):
        base = sql.Statement(None).table("table", "id", columns=["one", "two"])
        ob = base._select("count(*)").prepare()
        self.assertEqual(ob._full_query, "SELECT count(*) FROM table")


# TODO: need to collect some examples of more complex usage patterns from the manual in order to flesh out some cases that stretch complex joins, column arrangements, where clauses, subqueries, etc.
class TestComplexStatements(unittest.TestCase):
    pass
